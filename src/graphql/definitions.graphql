type User {
  id: String
  email: String
  nickname: String
  picture: String
  projects: [Project]
}

type Project {
  id: Int!
  title: String!
  description: String
  tasks: [Task]
  owner: User
  admins: [User]
  members: [User]
  created_at: String
  updated_at: String
}

type Task {
  id: Int!
  order: Int!
  title: String!
  description: String!
  project: Project!
  created_at: String!
  updated_at: String!
  completed: Boolean!
  completed_at: String
}

type Query {
  user(id: String): User
  projects(userId: String!): [Project]
  project(id: Int!): Project
  task(id: Int!): Task
}

input ProjectInput {
  title: String!
  description: String!
}

input TaskInput {
  title: String!
  projectId: Int!
  description: String!
}

type Mutation {
  createProject(project: ProjectInput!): Project
  updateProjectTitle(projectId: Int!, title: String!): Project
  createTask(task: TaskInput!): Task
  completeTask(taskId: Int!): Task
  updateTaskDescription(taskId: Int!, description: String!): Task
  deleteTasks(ids: [Int]!): [Int]
  inviteUser(projectId: Int!, email: String!): Project
  updateTaskOrder(id: Int!, order: Int!): Int
}
